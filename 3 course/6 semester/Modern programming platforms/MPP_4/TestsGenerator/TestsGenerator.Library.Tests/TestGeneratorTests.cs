namespace TestsGenerator.Library.Tests;

public class TestGeneratorTests
{
    [Fact]
    public async Task GenerateTestsAsync_CreatesTestFiles_ForPublicClasses()
    {
        string tempInputDir = Path.Combine(Path.GetTempPath(), "TestGeneratorInput");
        string tempOutputDir = Path.Combine(Path.GetTempPath(), "TestGeneratorOutput");
        Directory.CreateDirectory(tempInputDir);
        Directory.CreateDirectory(tempOutputDir);

        string sampleCode = """
                            using System;

                            namespace SampleNamespace
                            {
                                public class SampleClass
                                {
                                    public void MethodA() {}
                                    public void MethodB() {}
                                    public void MethodB(int num) {}
                                }
                            }
                            """;
        string inputFile = Path.Combine(tempInputDir, "Input.cs");
        await File.WriteAllTextAsync(inputFile, sampleCode);

        var generator = new TestGenerator();
        await generator.GenerateTestsAsync([inputFile], tempOutputDir);

        string expectedTestFile = Path.Combine(tempOutputDir, "SampleClassTests.cs");
        Assert.True(File.Exists(expectedTestFile), "Тестовый файл не найден.");

        string content = await File.ReadAllTextAsync(expectedTestFile);
            
        Assert.Contains("[Fact]", content);
        Assert.Contains("public void MethodATest()", content);
        Assert.Contains("public void MethodB1Test()", content);
        Assert.Contains("public void MethodB2Test()", content);
        Assert.Contains("""Assert.True(false, "autogenerated");""", content);

        Directory.Delete(tempInputDir, true);
        Directory.Delete(tempOutputDir, true);
    }
}